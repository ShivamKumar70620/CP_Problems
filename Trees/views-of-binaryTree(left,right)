https://practice.geeksforgeeks.org/problems/left-view-of-binary-tree/1
https://leetcode.com/problems/binary-tree-right-side-view/

code:-

[1]:- left view

vector<int> leftView(Node *root)
{
    vector<int> v;
    stack<Node*> s;
    map<Node*,int> mp;
    int k = 0,h = -1;
    while(1)
    {
        if(s.empty() && root==NULL)
            break;
        if(root==NULL){
            root = s.top();
            s.pop();
            k = mp[root];
            root = root->right;
            k++;
        }
        else{
            mp[root] = k++;
            s.push(root);
            if(mp[root]>h){
                v.push_back(root->data);
                h++;
            }
            root= root->left;
        }
    }
    return v;
}

[2]:- right view

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> v;
        stack<TreeNode*> s;
        map<TreeNode*,int> mp;
        int k = 0,h = -1;
        while(1)
        {
            if(s.empty() && root==NULL)
                break;
            if(root==NULL){
                root = s.top();
                s.pop();
                k = mp[root];
                root = root->left;
                k++;
            }
            else{
                mp[root] = k++;
                s.push(root);
                if(mp[root]>h){
                    v.push_back(root->val);
                    h++;
                }
                root= root->right;
                
            }
        }
        return v;
    }
};
