code:-

[1]:-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void mirror(TreeNode* root){
        if(root==NULL){
            return;
        }
        mirror(root->left);
        mirror(root->right);
        swap(root->left,root->right);
        
    }
    bool check(TreeNode* root,TreeNode* temp){
        if(root==NULL && temp==NULL)
            return 1;
        if(root==NULL || temp==NULL)
            return 0;
        if(root->val!=temp->val)
            return 0;
        return check(root->left,temp->left) && check(root->right,temp->right);
    }
    bool isSymmetric(TreeNode* root) {
        TreeNode* temp = root->left;
        mirror(temp);
        if(check(temp,root->right))   
            return 1;
        return 0;
    }
};

[2]:-

class Solution {
public:
    bool mirror(TreeNode* root1,TreeNode* root2){
        if(root1==NULL && root2==NULL){
            return 1;
        }
        if(root1==NULL || root2==NULL){
            return 0;
        }
        if(root1->val!=root2->val){
            return 0;
        }
        if(!(mirror(root1->left,root2->right) && mirror(root1->right,root2->left))){
            return 0;
        }
        return 1;
    }
    bool isSymmetric(TreeNode* root) {
        TreeNode* temp1 = root->left ,*temp2 = root->right;
        return mirror(temp1,temp2); 
            
    }
};
