Ref:-
https://www.youtube.com/watch?v=9wEwqNdOAVQ&list=PLDzeHZWIZsTq8KwpV5ipe5-ncApOTEL9k&index=2
https://leetcode.com/problems/n-queens/submissions/

Code:-

class Solution {
public:
    void addAns(vector<vector<int>>&board,vector<vector<string>> &ans,int n){
        vector<string> temp;
        for(int i=0;i<n;i++){
            string t = "";
            for(int j=0;j<n;j++)
            {
                if(board[i][j]==1)
                    t+='Q';
                else
                    t+='.';
            }
            temp.push_back(t);
        }
        ans.push_back(temp);
    }
    bool isSafe(int row,int col,vector<vector<int>>&board,int n){
        int x = row,y=col;
        while(y--){
            if(board[x][y]==1)
                return false;
        }
        x = row,y=col;
        while(x>=0 && y>=0){
            if(board[x][y]==1)
                return 0;
            x--;
            y--;
        }
        x = row,y=col;
        while(x<n && y>=0){
            if(board[x][y]==1)
                return 0;
            x++;
            y--;
        }
        return 1;
        
    }
    void solve(int col,vector<vector<int>> &board,vector<vector<string>> &ans,int n){
        if(col==n)
        {
            addAns(board,ans,n);
            return ;
        }
        for(int row=0;row<n;row++){
            if(isSafe(row,col,board,n)){
                board[row][col] = 1;
                solve(col+1,board,ans,n);
                board[row][col] = 0;
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<int>> board(n,vector<int>(n,0));
        vector<vector<string>> ans;
        solve(0,board,ans,n);
        return ans;
    }
};
