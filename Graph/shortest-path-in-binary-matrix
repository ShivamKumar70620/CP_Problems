https://leetcode.com/problems/shortest-path-in-binary-matrix/

code:-

[1] - TLE (my approach)

class Solution {
public:
    // int count;
    void dfs(int i,int j,int n,vector<vector<int>>& grid,vector<vector<bool>> &vis,int step,int &count){
        if(i==n-1 && j==n-1)
        {
            cout<<step<<endl;
            if(count>step)
                count = step;
            return;
        }
        vis[i][j] = 1;
        if(i-1>=0 && !vis[i-1][j] && grid[i-1][j]==0){
            dfs(i-1,j,n,grid,vis,step+1,count);
        }
        if(i-1>=0 && j-1>=0 && !vis[i-1][j-1] && grid[i-1][j-1]==0){
            dfs(i-1,j-1,n,grid,vis,step+1,count);
        }
        if(j-1>=0 && !vis[i][j-1] && grid[i][j-1]==0){
            dfs(i,j-1,n,grid,vis,step+1,count);
        }
        if(i+1<=n-1 && j-1>=0 && !vis[i+1][j-1] && grid[i+1][j-1]==0) {
            dfs(i+1,j-1,n,grid,vis,step+1,count);
        }
        if(i+1<=n-1 && !vis[i+1][j] && grid[i+1][j]==0){
            dfs(i+1,j,n,grid,vis,step+1,count);
        }
        if(i+1<=n-1 && j+1<=n-1 && !vis[i+1][j+1] && grid[i+1][j+1]==0){
            dfs(i+1,j+1,n,grid,vis,step+1,count);
        }
        if(j+1<=n-1 && !vis[i][j+1] && grid[i][j+1]==0){
            dfs(i,j+1,n,grid,vis,step+1,count);
        }
        if(i-1>=0 && j+1<=n-1 &&!vis[i-1][j+1] && grid[i-1][j+1]==0){
            dfs(i-1,j+1,n,grid,vis,step+1,count);
        }
        vis[i][j] = 0;
        
    }
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid[0][0]==1)
            return -1;
        // queue<vector<int>> q;
        int n = grid.size();
        // q.push({0,0});
        vector<vector<bool>> vis(n,vector<bool>(n,false));
        // int count = INT_MAX;
        // int step = 0;
        int count = INT_MAX;
        int step = 1;
        dfs(0,0,n,grid,vis,step,count);
        return count==INT_MAX?-1:count;
        
    }
};

[2] - solved using BFS

class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if(grid[0][0]==1)
            return -1;
        if(grid[0][0]==0 && n==1)
            return 1;
        bool vis[n][n];
        for(int i=0;i<n;i++)
            fill(vis[i],vis[i]+n,false);
        vis[0][0] = 1;
        queue<pair<pair<int,int>,int>> q;
        q.push({{0,0},1}); //where {0,0} is starting index and 1 is length of path;
        while(!q.empty()){
            pair<int,int> p = q.front().first;
            int i = p.first;
            int j = p.second;
            int l = q.front().second;
            q.pop();
            vector<pair<int,int>> dir = {{0,1},{1,0},{-1,0},{0,-1},{1,1},{1,-1},{-1,1},{-1,-1}};
            for(auto neighbour:dir){
                int newi = neighbour.first+i;
                int newj = neighbour.second+j;
                if(newi>=0 && newj>=0 && newi<n && newj<n && grid[newi][newj]==0 && !vis[newi][newj]){
                    vis[newi][newj] = true;
                    q.push({{newi,newj},l+1});
                    if(newi==n-1 && newj==n-1)
                        return l+1;
                }
            }
        }
        return -1;
        
    }
};
