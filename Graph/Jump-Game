code:-

[1] - my approach : TLE

class Solution {
public:
    bool dfs(int i,int n,vector<int> &nums){
        // cout<<i<<endl;
        if(i==n-1)
            return 1;
        if(i>=n || nums[i]==0)
            return 0;
        for(int j=i+nums[i];j>=i+1;j--)
            if(dfs(j,n,nums))
                return 1;
        return 0;
        
    }
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        return dfs(0,n,nums);
    }
};

[2] - BFS approach 

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        queue<int> q;
        q.push(0);
        bool vis[n];
        fill(vis,vis+n,false);
        vis[0] = 1;
        while(!q.empty()){
            int i = q.front();
            if(i==n-1)
                return 1;
            q.pop();
            for(int j=nums[i]+i;j>=i+1;j--){
                if(j<n && !vis[j])
                {
                    vis[j] = 1;
                    q.push(j);
                }
            }
        }
        return 0;
    }
};
