https://practice.geeksforgeeks.org/problems/bfs-traversal-of-graph/1#


code:
1 - recursive

class Solution {
  public:
    // Function to return Breadth First Traversal of given graph.
    
    void bfs(vector<int> adj[],vector<int> &ans,queue<int> q,vector<bool> &vis){
        if(q.empty())
            return;
        // cout<<i<<endl;
        // vis[i] = 1;
        int top = q.front();
        q.pop();
        ans.push_back(top);
        for(auto j:adj[top]){
            // cout<<j<<endl;
            if(!vis[j]){
                vis[j] = 1;
                q.push(j);
                
            }
        }
        bfs(adj,ans,q,vis);
        // cout<<q.back()<<endl;
        return ;
    }
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        vector<int> ans;
        // ans.push_back(0);
        vector<bool> vis(V,0);
        queue<int> q;
        q.push(0);
        vis[0] = 1;
        bfs(adj,ans,q,vis);
        return ans;
    }
};


2- iterative

class Solution {
  public:
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        vector<int> v;
        bool visited[V+1];
        for(int i=0;i<V;i++)
            visited[i] = false;
        queue<int> q;
        visited[0] = true;
        q.push(0);
        while(!q.empty()){
            int u = q.front();
            v.push_back(u);
            q.pop();
            for(int i:adj[u]){
                if(visited[i]==false){
                    visited[i] = true;
                    q.push(i);
                }
            }
        }
        return v;
    }
};
