https://leetcode.com/problems/word-ladder/

code:-

[1] - using BFS

class Solution {
public:
    
    int ladderLength(string bW, string eW, vector<string>& wordList) {
        queue<pair<string,int>> q;
        q.push({bW,1});
        map<string,bool> vis;
        while(!q.empty()){
            string x = q.front().first;
            int ind = q.front().second;
            if(x==eW)
                return ind;
            q.pop();
            if(!vis[x]){
                vis[x] = 1;
                for(auto s:wordList){
                    int c = 0;
                    for(int j=0;j<s.size();j++){
                        if(s[j]==x[j])
                            continue;
                        if(s[j]!=x[j])
                            c+=1;
                        if(c>1)
                            break;
                    }
                    if(c==1){
                        q.push({s,ind+1});
                    }
                }
            }
        }
        return 0;
    }
};

[2];- bfs

class Solution {
public:
    
    int ladderLength(string bW, string eW, vector<string>& wordList) {
        queue<string> q;
        q.push(bW);
        set<string> st;
        for(auto i:wordList)
            st.insert(i);
        map<string,bool> vis;
        int ind = 0,m=wordList.size();
        if(bW==eW ||(st.find(eW)==st.end()))
            return 0;
        while(!q.empty()){
            ++ind;
            int qs = q.size();
            for(int j=0;j<qs;j++){
                string x = q.front();
                q.pop();
                int n = x.size();
                for(int i=0;i<n;i++){
                    char c = x[i];
                    for(char k = 'a';k<='z';k++){
                        x[i] = k;
                        if(x==eW)
                            return ind+1;
                        if(st.find(x)==st.end())
                            continue;
                        st.erase(x);
                        q.push(x);
                    }
                    x[i] = c;
                }
            }
            
            
        }
        return 0;
    }
};
