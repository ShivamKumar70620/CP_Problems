https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1#


code:-
[1]:- BFS

class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool bfs(vector<int> adj[],queue<int> &q,unordered_map<int,int> parent,vector<int> &vis){
        if(q.empty())
            return 0;
        int x = q.front();
        q.pop();
        // cout<<"parent"<<x<<endl;
        for(auto i:adj[x]){
            // cout<<i<<endl;
            if(!vis[i]){
                vis[i] = 1;
                q.push(i);
                parent[i] = x;
            }
            else{
                if(parent[x]!=i)
                    return 1;
            }
            
            
        }
        return bfs(adj,q,parent,vis);
        
    }
    bool isCycle(int V, vector<int> adj[]) {
        unordered_map<int,int> parent;
        vector<int> vis(V,0);
        queue<int> q;
        for(int i=0;i<V;i++)
            if(!vis[i])
            {
                vis[i] = 1;
                q.push(i);
                bool ans = bfs(adj,q,parent,vis);
                // cout<<ans<<endl;
                if(ans==1)
                    return 1;
            }
            
        return 0;
    }
};


[2]:-  DFS

class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    
    bool dfs(int src,vector<int> adj[],vector<bool> &vis,int parent){
        vis[src] = 1;
        for(auto i:adj[src]){
            if(!vis[i]){
                if(dfs(i,adj,vis,src)) return 1;
            }
            else if(parent!=i)
                return 1;
                
        }
        return 0;
    }
    bool isCycle(int V, vector<int> adj[]) {
        // unordered_map<int,int> parent;
        vector<bool> vis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i])
            {
                bool c = dfs(i,adj,vis,-1);
                if(c)
                    return 1;
            }
        }
        return 0;
    }
};
