https://leetcode.com/problems/where-will-the-ball-fall/

code:-

[1]:- Recursion solution all test cases passed
class Solution {
public:
    int solve(int i,int j,vector<vector<int>>&grid,int n,int m){
        if(i>=n)
            return j;
        if(j>=m || j<0){
            // cout<<"1st"<<endl;
            return -1;
        }
            
        //cout<<i<<" "<<j<<endl;
        if(grid[i][j]==1)
        {
            if(j<m-1 && grid[i][j+1]==1){
                return solve(i+1,j+1,grid,n,m);
            }
            else{
                // cout<<"2nd"<<endl;
                return -1;
            }
        }
        else{
            if(j>0 && grid[i][j-1]==-1){
                return solve(i+1,j-1,grid,n,m);
            }
            else{
                // cout<<"3rd"<<endl;
                return -1;
            }
        }
        
    }
    vector<int> findBall(vector<vector<int>>& grid) {
        int n = grid.size(),m = grid[0].size();
        vector<int> ans;
        for(int i=0;i<m;i++){
            ans.push_back(solve(0,i,grid,n,m));
        }
        return ans;
    }
};


[2]:- dp solution 

class Solution {
public:
    int solve(int i,int j,vector<vector<int>>&grid,int n,int m,vector<vector<int>> &dp){
        if(i>=n)
            return j;
        if(j>=m || j<0){
            // cout<<"1st"<<endl;
            return -1;
        }
        if(dp[i][j]!=-2)    
            return dp[i][j];
        // cout<<i<<" "<<j<<endl;
        if(grid[i][j]==1)
        {
            if(j<m-1 && grid[i][j+1]==1){
                return dp[i][j] =  solve(i+1,j+1,grid,n,m,dp);
            }
            else{
                // cout<<"2nd"<<endl;
                return -1;
            }
        }
        else{
            if(j>0 && grid[i][j-1]==-1){
                return dp[i][j] = solve(i+1,j-1,grid,n,m,dp);
            }
            else{
                // cout<<"3rd"<<endl;
                return -1;
            }
        }
        
    }
    vector<int> findBall(vector<vector<int>>& grid) {
        int n = grid.size(),m = grid[0].size();
        vector<int> ans;
        vector<vector<int>> dp(n,vector<int>(m,-2));
        for(int i=0;i<m;i++){
            ans.push_back(solve(0,i,grid,n,m,dp));
        }
        return ans;
    }
};
