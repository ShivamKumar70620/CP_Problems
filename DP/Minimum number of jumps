code:-

class Solution{
  public:
    
    int minJumps(int arr[], int n){
        if(n==1)
            return 0;
        int A[n];
        A[0] = 0;
        int ind = 0;
        int steps = 1;
        while(ind<n){
            int mx = 0;
            int i = ind;
            if(arr[i]+i>=n-1)
                return A[i]+1;
            // cout<<ind<<endl;
            for(int j=i+1;j<=i+arr[i];j++)
            {
                
                A[j] = steps;
                if(arr[j]-arr[i]+(j-i)>mx)
                {
                    mx = arr[j]-arr[i]+(j-i);
                    ind = j;
                }
            }
            if(mx+ind>=n-1)
                return A[ind]+1;
            if(i==ind)
                return -1;
            
            steps+=1;
        }
        return A[n-1];
        
    }
};




[2]:-

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        queue<int> q;
        q.push(0);
        bool vis[n];
        fill(vis,vis+n,false);
        vis[0] = 1;
        while(!q.empty()){
            int i = q.front();
            if(i==n-1)
                return 1;
            q.pop();
            for(int j=nums[i]+i;j>=i+1;j--){
                if(j<n && !vis[j])
                {
                    vis[j] = 1;
                    q.push(j);
                }
            }
        }
        return 0;
    }
};
