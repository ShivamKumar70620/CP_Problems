https://leetcode.com/problems/minimum-falling-path-sum/

code:-
[1]:- recursion solution gives TLE
class Solution {
public:
    int x=0,y=0,z=0;
    int solve(int i,int j,vector<vector<int>>& matrix,int n,int m){
        // cout<<matrix[i][j]<<endl;
        if(i>=n)
            return 0;
        if(j<0 || j>=n)
            return 1000000;
        
        return matrix[i][j]+min(min(solve(i+1,j-1,matrix,n,m),solve(i+1,j,matrix,n,m)),solve(i+1,j+1,matrix,n,m));
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size(),m = matrix[0].size();
        int x = INT_MAX;
        for(int i=0;i<m;i++)
            x = min(x,solve(0,i,matrix,n,m));
        return x;
    }
};

[2]:- using dp

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size(),m = matrix[0].size();
        int x = INT_MAX;
        vector<vector<int>> dp(n,vector<int>(m));
        for(int i=n-2;i>=0;i--){
            for(int j=0;j<m;j++){
                int a=INT_MAX,b=INT_MAX,c=INT_MAX;
                if(j-1>=0)
                    a = matrix[i+1][j-1];
                b = matrix[i+1][j];
                if(j+1<n)
                    c = matrix[i+1][j+1];
                // cout<<a<<" "<<b<<" "<<c<<endl;
                dp[i][j] = min(min(a,b),c)+matrix[i][j];
                matrix[i][j] = dp[i][j];
            }
            
        }
        for(int i=0;i<m;i++){
            cout<<dp[0][i]<<" ";
            x = min(x,dp[0][i]);
        }
        if(n==1)
            return matrix[0][0];
        return x;
    }
};
