ref:-
https://leetcode.com/problems/word-search/
Solving the problem with the help of dfs

code:
class Solution {
public:
    bool solve(int i,int j,vector<vector<char>>& board,vector<vector<bool>> &vis,string word,int k){
         //cout<<ans<<endl;
         if(k==word.size()-1)
            return 1;
        vis[i][j] = true;
        if(i>0 && !vis[i-1][j] && board[i-1][j]==word[k+1] && solve(i-1,j,board,vis,word,k+1) ) return 1; 
        else if(j>0 && !vis[i][j-1] && board[i][j-1]==word[k+1] && solve(i,j-1,board,vis,word,k+1)) return 1;
        else if(i<board.size()-1 && !vis[i+1][j] && board[i+1][j]==word[k+1] && solve(i+1,j,board,vis,word,k+1)) return 1;
        else if(j<board[0].size()-1 && !vis[i][j+1] && board[i][j+1]==word[k+1] && solve(i,j+1,board,vis,word,k+1)) return 1;
        vis[i][j] = false;
        return false;
     
    }
    bool exist(vector<vector<char>>& board, string word) {
        int r = board.size(),c = board[0].size();
        vector<vector<bool>> vis(r,vector<bool>(c,false)) ;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(board[i][j]==word[0] && solve(i,j,board,vis,word,0))
                    return true;
            }
        }
        return false;
    }
};
