Ref:-
https://leetcode.com/problems/sudoku-solver/submissions/
https://practice.geeksforgeeks.org/problems/solve-the-sudoku-1587115621/1

code:-
class Solution {
public:
    bool isSafe(vector<vector<char>>& board,char val,int row,int col){
        for(int i=0;i<board.size();i++){
            if(board[row][i]==val)
                return 0;
            if(board[i][col]==val)
                return 0;
            if(board[3*(row/3)+ i/3 ][3*(col/3) + i%3]==val)
                return 0;
        }
        return 1;
        
    }
    bool solve(vector<vector<char>>& board){
        int n = board[0].size();
        for(int row=0;row<n;row++){
            for(int col=0;col<n;col++){
                if(board[row][col]=='.')
                {
                    for(int i=1;i<=9;i++){
                        char k = '0'+i;
                        if(isSafe(board,k,row,col)){
                            board[row][col] = k;
                            bool nextSolutionPoss = solve(board);
                            if(nextSolutionPoss)
                                return 1;
                            else
                                board[row][col] = '.';
                        }
                    }
                    return 0;
                }
            }
        }
        return 1;
        
    }
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};


T.C. = 9^(m) , m = no of empty cells
S.C. = O(1) , max of 81 rec calls
